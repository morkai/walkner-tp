// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

module.exports = (setUpModel, setUpRoutes, customSetUp) =>
{
  return {
    DEFAULT_CONFIG: {
      mongooseId: 'mongoose',
      expressId: 'express',
      userId: 'user'
    },
    models: [setUpModel],
    requiredModules: 'mongoose',
    optionalModules: {
      'user express': (app, module) =>
      {
        if (typeof setUpRoutes === 'function')
        {
          setUpRoutes(app, module);
        }
        else if (typeof setUpRoutes === 'string')
        {
          setUpDefaultRoutes(app, module, setUpRoutes);
        }
      }
    },
    start: (app, module, done) =>
    {
      const Model = module.mongoose.model(setUpModel.name);

      module.useDictionaryModel = useDictionaryModel;
      module.Model = Model;
      module.models = [];
      module.modelsById = {};
      module.updatedAt = Date.now();

      app.broker.subscribe(`${Model.TOPIC_PREFIX}.added`, (message, topic) =>
      {
        const model = message.model instanceof Model ? message.model : new Model(message.model);

        module.models.push(model);

        module.modelsById[model._id] = model;

        publishDictionaryUpdate(topic, message);
      });

      app.broker.subscribe(`${Model.TOPIC_PREFIX}.edited`, (message, topic) =>
      {
        const model = message.model instanceof Model ? message.model : new Model(message.model);
        const id = String(model._id);
        const i = module.models.findIndex(m => String(m._id) === id);

        if (i === -1)
        {
          module.models.push(model);
        }
        else
        {
          module.models[i] = model;
        }

        module.modelsById[id] = model;

        publishDictionaryUpdate(topic, message);
      });

      app.broker.subscribe(`${Model.TOPIC_PREFIX}.deleted`, (message, topic) =>
      {
        const id = String(message.model._id);

        module.models = module.models.filter((model) => String(model._id) !== id);

        delete module.modelsById[id];

        publishDictionaryUpdate(topic, message);
      });

      if (typeof customSetUp === 'function')
      {
        customSetUp(app, module);
      }

      fetchData(done);

      function fetchData(done)
      {
        const query = Model.findForDictionary ? Model.findForDictionary() : Model.find();

        query.exec((err, models) =>
        {
          if (err)
          {
            return done(err);
          }

          module.models = new Array(models.length);
          module.modelsById = {};

          models.forEach((model, i) =>
          {
            module.models[i] = model;
            module.modelsById[model._id] = model;
          });

          done();
        });
      }

      function useDictionaryModel(req, res, next)
      {
        req.model = module.modelsById[req.params.id] || null;

        next();
      }

      function publishDictionaryUpdate(topic, message)
      {
        module.updatedAt = Date.now();

        app.broker.publish('dictionaries.updated', {topic, message});
      }
    }
  };
};

function setUpDefaultRoutes(app, module, urlPrefix)
{
  const {express, user, Model, useDictionaryModel} = module;

  const canView = user.auth(...(Model.PRIVILEGES_VIEW || ['DICTIONARIES:VIEW']));
  const canManage = user.auth(...(Model.PRIVILEGES_MANAGE || ['DICTIONARIES:MANAGE']));

  express.get(`/${urlPrefix}`, canView, express.crud.browseRoute.bind(null, app, Model));
  express.post(`/${urlPrefix}`, canManage, express.crud.addRoute.bind(null, app, Model));
  express.get(`/${urlPrefix}/:id`, canView, express.crud.readRoute.bind(null, app, Model));
  express.put(`/${urlPrefix}/:id`, canManage, express.crud.editRoute.bind(null, app, Model));
  express.delete(`/${urlPrefix}/:id`, canManage, useDictionaryModel, express.crud.deleteRoute.bind(null, app, Model));
}
