// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const {formatDate} = require('./dateFormatter');

exports.SHIFT_LENGTH = 8;

exports.SHIFT_COUNT = 24 / exports.SHIFT_LENGTH;

exports.SHIFT_START_HOUR = [null, 6, 14, 22];

exports.getShiftInfo = (dateOrTime, isUtc) =>
{
  const shiftMoment = isUtc ? moment.utc(dateOrTime) : moment(dateOrTime);
  const h = shiftMoment.hours();
  const shiftInfo = {
    moment: shiftMoment,
    date: null,
    ymd: '',
    startTime: null,
    endTime: null,
    startHour: 0,
    no: 0
  };

  if (h >= exports.SHIFT_START_HOUR[1] && h < exports.SHIFT_START_HOUR[2])
  {
    shiftInfo.no = 1;
  }
  else if (h >= exports.SHIFT_START_HOUR[2] && h < exports.SHIFT_START_HOUR[3])
  {
    shiftInfo.no = 2;
  }
  else
  {
    shiftInfo.no = 3;

    if (h < 6)
    {
      shiftMoment.subtract(1, 'days');
    }
  }

  shiftInfo.startHour = exports.SHIFT_START_HOUR[shiftInfo.no];

  shiftInfo.moment.hours(shiftInfo.startHour).startOf('hour');

  shiftInfo.date = shiftInfo.moment.toDate();
  shiftInfo.ymd = formatDate(shiftInfo.date);
  shiftInfo.startTime = shiftInfo.date.getTime();
  shiftInfo.endTime = shiftInfo.startTime + exports.SHIFT_LENGTH * 3600 * 1000;

  return shiftInfo;
};

exports.getCurrentShiftInfo = (asUtc = false) =>
{
  if (asUtc)
  {
    return exports.getShiftInfo(moment().utc(true).valueOf(), true);
  }

  return exports.getShiftInfo(Date.now(), false);
};

exports.getShiftNo = (dateOrTime, isUtc = false) =>
{
  const date = typeof dateOrTime === 'number' ? new Date(dateOrTime) : dateOrTime;
  const h = date[isUtc ? 'getUTCHours' : 'getHours']();

  if (h >= 6 && h < 14)
  {
    return 1;
  }

  if (h >= 14 && h < 22)
  {
    return 2;
  }

  return 3;
};

exports.getCurrentDate = (asUtc = false) =>
{
  const currentDate = moment();

  if (currentDate.hours() < exports.SHIFT_START_HOUR[1])
  {
    currentDate.subtract(1, 'days');
  }

  currentDate.startOf('day');

  return asUtc ? currentDate.utc(true) : currentDate;
};

exports.getPlanDate = (input, isUtc = false) =>
{
  const m = isUtc ? moment.utc(input) : moment(input);

  if (m.hours() < exports.SHIFT_START_HOUR[1])
  {
    m.subtract(1, 'days');
  }

  m.startOf('day');

  return m;
};

exports.getFirstShiftStartTime = (time, isUtc = false) =>
{
  const date = new Date(time);
  let setHours = 'setHours';
  let getHours = 'getHours';

  if (isUtc)
  {
    setHours = 'setUTCHours';
    getHours = 'getUTCHours';
  }

  const h = date[getHours]();

  if (h < 6)
  {
    date[setHours](0, 0, 0, 0);
    date[setHours](-(2 + 8 + 8));
  }
  else
  {
    date[setHours](6, 0, 0, 0);
  }

  return date.getTime();
};
